/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sisplanperguntas;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Suporte
 */
public class TelaPerguntas extends javax.swing.JFrame {

    /**
     * Creates new form TelaPerguntas
     */
    public TelaPerguntas() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        Insets in = Toolkit.getDefaultToolkit().getScreenInsets(this.getGraphicsConfiguration()); 

         Dimension d = Toolkit.getDefaultToolkit().getScreenSize(); 

          int width = d.width-(in.left + in.top); 
          int height = d.height-(in.top + in.bottom); 
          setSize(width,height); 
          setLocation(in.left,in.top);
          
          jTUsuario.setEditable(false);
          jTCorreta1.setVisible(false);
          jTCorreta2.setVisible(false);
          jTCorreta3.setVisible(false);
          jTCorreta4.setVisible(false);
          jTCorreta5.setVisible(false);
          jTNivel.setEnabled(false);
          jFTData.setEditable(false);
          
          jRBAlterna1.setVisible(false);
          jRBAlterna2.setVisible(false);
          jRBAlterna3.setVisible(false);
          jRBAlterna4.setVisible(false);
          jRBAlterna5.setVisible(false);
          
        if (jTUsuario.getText().equals("")){  
          Iinicia.setEnabled(false);
          responde.setEnabled(false);
        }
    }
    int rand;
    String permitido;
    int numero_guardado;
    int numero_perguntas;
    int qtde_per;
    int qtde_rea;
    String usuarios;
    String niveis;
    int codigo;
    String niveils;
    int numero_ger;
    String datas;
    
    public boolean issuspended = false;
        int hora = 0;
        int min = 0;
        int seg = 0;
        int ds = 0;
        
        Thread hilo = new Thread() {
            public void run() {
            try {
                while (true) {
                    if (ds == 99) {
                        ds = 0;
                        seg++;
                    }
                    if (seg == 59) {
                        seg = 0;
                        min++;
                    }
                    if (min == 59) {
                        min = 0;
                        hora++;
                    }
                    ds ++;

                    jLCronometro.setText(hora + ":" + min + ":" + seg + ":" + ds);

                    hilo.sleep(10);
                }
            } catch (java.lang.InterruptedException ie) {
                System.out.println(ie.getMessage());
            }
            }
        };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPPerguntas = new javax.swing.JPanel();
        jLPerguntas = new javax.swing.JLabel();
        jRBAlterna1 = new javax.swing.JRadioButton();
        jRBAlterna2 = new javax.swing.JRadioButton();
        jRBAlterna3 = new javax.swing.JRadioButton();
        jRBAlterna4 = new javax.swing.JRadioButton();
        jRBAlterna5 = new javax.swing.JRadioButton();
        jTCorreta1 = new javax.swing.JTextField();
        jTCorreta2 = new javax.swing.JTextField();
        jTCorreta3 = new javax.swing.JTextField();
        jTCorreta4 = new javax.swing.JTextField();
        jTCorreta5 = new javax.swing.JTextField();
        jLAlterna1 = new javax.swing.JLabel();
        jLAlterna2 = new javax.swing.JLabel();
        jLAlterna3 = new javax.swing.JLabel();
        jLAlterna4 = new javax.swing.JLabel();
        jLAlterna5 = new javax.swing.JLabel();
        jLCodPergunta = new javax.swing.JLabel();
        responde = new javax.swing.JButton();
        fecha = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Iinicia = new javax.swing.JButton();
        jLCronometro = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTNivel = new javax.swing.JTextField();
        jFTData = new javax.swing.JFormattedTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMINovoJogo = new javax.swing.JMenuItem();
        jMISair = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        grupo = new javax.swing.JMenuItem();
        relatorio = new javax.swing.JMenuItem();
        RelatorioAlternativa = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPPerguntas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Perguntas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLPerguntas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLPerguntas.setToolTipText("");

        jRBAlterna1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRBAlterna1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBAlterna1ActionPerformed(evt);
            }
        });

        jRBAlterna2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRBAlterna2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBAlterna2ActionPerformed(evt);
            }
        });

        jRBAlterna3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRBAlterna3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBAlterna3ActionPerformed(evt);
            }
        });

        jRBAlterna4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRBAlterna4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBAlterna4ActionPerformed(evt);
            }
        });

        jRBAlterna5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRBAlterna5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBAlterna5ActionPerformed(evt);
            }
        });

        jTCorreta1.setToolTipText("");

        jLAlterna1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLAlterna2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLAlterna3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLAlterna4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLAlterna5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLCodPergunta.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPPerguntasLayout = new javax.swing.GroupLayout(jPPerguntas);
        jPPerguntas.setLayout(jPPerguntasLayout);
        jPPerguntasLayout.setHorizontalGroup(
            jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPerguntasLayout.createSequentialGroup()
                .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLCodPergunta, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLPerguntas, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jTCorreta1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jRBAlterna1)
                        .addGap(6, 6, 6)
                        .addComponent(jLAlterna1, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jTCorreta2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jRBAlterna2)
                        .addGap(6, 6, 6)
                        .addComponent(jLAlterna2, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jTCorreta3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jRBAlterna3)
                        .addGap(6, 6, 6)
                        .addComponent(jLAlterna3, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jTCorreta4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jRBAlterna4)
                        .addGap(6, 6, 6)
                        .addComponent(jLAlterna4, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jTCorreta5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jRBAlterna5)
                        .addGap(6, 6, 6)
                        .addComponent(jLAlterna5, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPPerguntasLayout.setVerticalGroup(
            jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPerguntasLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLPerguntas, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLCodPergunta, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTCorreta1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRBAlterna1)
                    .addComponent(jLAlterna1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTCorreta2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRBAlterna2)
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLAlterna2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55)
                .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jTCorreta3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRBAlterna3)
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLAlterna3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43)
                .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRBAlterna4)
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTCorreta4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLAlterna4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(46, 46, 46)
                .addGroup(jPPerguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTCorreta5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRBAlterna5)
                    .addGroup(jPPerguntasLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLAlterna5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        responde.setText("Responder");
        responde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respondeActionPerformed(evt);
            }
        });

        fecha.setText("Fechar");
        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        jLabel1.setText("Usuario:");

        jLabel2.setText("Tempo:");

        Iinicia.setText("► Iniciar");
        Iinicia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IiniciaActionPerformed(evt);
            }
        });

        jLCronometro.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setText("Nivel:");

        jTNivel.setToolTipText("");

        try {
            jFTData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jMenu1.setText("Opções");

        jMINovoJogo.setText("Novo Jogo");
        jMINovoJogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMINovoJogoActionPerformed(evt);
            }
        });
        jMenu1.add(jMINovoJogo);

        jMISair.setText("Sair");
        jMISair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISairActionPerformed(evt);
            }
        });
        jMenu1.add(jMISair);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Acesso Adm");

        jMenuItem1.setText("Cadastro Perguntas");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Cadastro do Random");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        grupo.setText("Cadastro Grupo");
        grupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grupoActionPerformed(evt);
            }
        });
        jMenu2.add(grupo);

        relatorio.setText("Relatorio");
        relatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioActionPerformed(evt);
            }
        });
        jMenu2.add(relatorio);

        RelatorioAlternativa.setText("Relatorio Perguntas");
        RelatorioAlternativa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RelatorioAlternativaActionPerformed(evt);
            }
        });
        jMenu2.add(RelatorioAlternativa);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPPerguntas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFTData, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLCronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Iinicia, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(responde, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jTNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jFTData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(jLabel2)
                    .addComponent(jLCronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(responde, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Iinicia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23)
                .addComponent(jPPerguntas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_fechaActionPerformed

    private void jMINovoJogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMINovoJogoActionPerformed
        TelaNovoJogo  novo_jogo = new TelaNovoJogo();
        novo_jogo.setTelaPerguntas(this);
        novo_jogo.setVisible(true);
        novo_jogo.setLocationRelativeTo(this);
        
        Iinicia.setEnabled(true);
        responde.setEnabled(true);
    }//GEN-LAST:event_jMINovoJogoActionPerformed

    private void jMISairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISairActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jMISairActionPerformed

    private void IiniciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IiniciaActionPerformed
       
        responde.setEnabled(true);
        
        if (!issuspended) {
            hilo.start();

        } else {
            hilo.resume();
            issuspended = false;

        }
        
        jRBAlterna1.setVisible(true);
        jRBAlterna2.setVisible(true);
        jRBAlterna3.setVisible(true);
        jRBAlterna4.setVisible(true);
        jRBAlterna5.setVisible(true);
        
        Connection connection = null;
        Statement statement = null;
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM RANDOM;");

           
            
            while (resultSet.next()) {
                int random = resultSet.getInt("RANDOM");
                int qtde_pergunta = resultSet.getInt("QTDE_PERGUNTA");
                
               rand = random;                 
                
            }
            resultSet.close();
            statement.close();            
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + "erro na consulta de pacientes botão consultar " + e.getMessage());
            System.exit(0);
        }
        
        
         
        
         Random rando = new Random();  
          
        ArrayList<Integer> lista = new ArrayList<Integer>();      
          
        int numeros = 0;
        
          
        while(lista.size() < 1)  
        {  
            numeros = rando.nextInt(rand) +1;  
            if(lista.contains(numeros) == false)  
            {  
                System.out.println(numeros);  
                lista.add(numeros);
                numero_ger = numeros;
            }  
        }  
        
       /* int numero_ger;
        
        
        Random gerador = new Random();
 
        int gerado = gerador.nextInt(rand);
        if (gerado == 0){
            gerado = 1;
        }
        
        numero_ger = gerado;*/
        
        
        
        int linha = 0;
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM CADPERGUNTAS WHERE NUMERO = '"+ numero_ger +"' AND NIVEL = '"+ jTNivel.getText() +"'");

           
            
            while (resultSet.next()) {
                int numero = resultSet.getInt("NUMERO");
                String pergunta = resultSet.getString("PERGUNTA");
                String alternativa1 = resultSet.getString("ALTERNATIVA1");
                String alternativa2 = resultSet.getString("ALTERNATIVA2");
                String alternativa3 = resultSet.getString("ALTERNATIVA3");
                String alternativa4 = resultSet.getString("ALTERNATIVA4");
                String alternativa5 = resultSet.getString("ALTERNATIVA5");
                String certa1 = resultSet.getString("CERTA1");
                String certa2 = resultSet.getString("CERTA2");
                String certa3 = resultSet.getString("CERTA3");
                String certa4 = resultSet.getString("CERTA4");
                String certa5 = resultSet.getString("CERTA5");
                String nivel = resultSet.getString("NIVEL");
                
                jLCodPergunta.setText(Integer.toString(numero));
                jLPerguntas.setText(pergunta);
                jLAlterna1.setText(alternativa1);
                jLAlterna2.setText(alternativa2);
                jLAlterna3.setText(alternativa3);
                jLAlterna4.setText(alternativa4);
                jLAlterna5.setText(alternativa5);
                jTCorreta1.setText(certa1);
                jTCorreta2.setText(certa2);
                jTCorreta3.setText(certa3);
                jTCorreta4.setText(certa4);
                jTCorreta5.setText(certa5);
                
                
            }
            resultSet.close();
            statement.close();            
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + "erro na consulta de pacientes botão consultar " + e.getMessage());
            System.exit(0);
        }
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM TEMPORARIA;");

           
            
            while (resultSet.next()) {
                String data = resultSet.getString("DATA");
                String nivel = resultSet.getString("NIVEL");
                int codpergunta = resultSet.getInt("CODPERGUNTA");
                String pergunta = resultSet.getString("PERGUNTA");
                String usuario = resultSet.getString("USUARIO");
                
                usuarios = usuario;
                niveis   = nivel;
                codigo   = codpergunta;
                niveils  = nivel;
                datas = data;
                
            }
            resultSet.close();
            statement.close();            
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + "erro na consulta de pacientes botão consultar " + e.getMessage());
            System.exit(0);
        }
        String data = jFTData.getText();
        String nivel = jTNivel.getText();
        int codpergunta = Integer.parseInt(jLCodPergunta.getText());
        String pergunta = jLPerguntas.getText();
        String usuario = jTUsuario.getText();
        
    if (usuario != usuarios && nivel != niveils && datas != data){
        
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM RANDOM;");

           
            
            while (resultSet.next()) {
                int random = resultSet.getInt("RANDOM");
                int qtde_pergunta = resultSet.getInt("QTDE_PERGUNTA");
                
               rand = random;                 
                
            }
            resultSet.close();
            statement.close();            
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + "erro na consulta de pacientes botão consultar " + e.getMessage());
            System.exit(0);
        }
        
        while(lista.size() < 1)  
        {  
            numeros = rando.nextInt(rand) +1;  
            if(lista.contains(numeros) == false)  
            {  
                System.out.println(numeros);  
                lista.add(numeros);
                
            }  
        }
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM CADPERGUNTAS WHERE NUMERO = '"+ codigo +"' AND NIVEL = '"+ niveils +"'");

           
            
            while (resultSet.next()) {
                int numero = resultSet.getInt("NUMERO");
                String perguntas = resultSet.getString("PERGUNTA");
                String alternativa1 = resultSet.getString("ALTERNATIVA1");
                String alternativa2 = resultSet.getString("ALTERNATIVA2");
                String alternativa3 = resultSet.getString("ALTERNATIVA3");
                String alternativa4 = resultSet.getString("ALTERNATIVA4");
                String alternativa5 = resultSet.getString("ALTERNATIVA5");
                String certa1 = resultSet.getString("CERTA1");
                String certa2 = resultSet.getString("CERTA2");
                String certa3 = resultSet.getString("CERTA3");
                String certa4 = resultSet.getString("CERTA4");
                String certa5 = resultSet.getString("CERTA5");
                String nivels = resultSet.getString("NIVEL");
                
                jLCodPergunta.setText(Integer.toString(numero));
                jLPerguntas.setText(pergunta);
                jLAlterna1.setText(alternativa1);
                jLAlterna2.setText(alternativa2);
                jLAlterna3.setText(alternativa3);
                jLAlterna4.setText(alternativa4);
                jLAlterna5.setText(alternativa5);
                jTCorreta1.setText(certa1);
                jTCorreta2.setText(certa2);
                jTCorreta3.setText(certa3);
                jTCorreta4.setText(certa4);
                jTCorreta5.setText(certa5);
                
                
            }
            resultSet.close();
            statement.close();            
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + "erro na consulta de pacientes botão consultar " + e.getMessage());
            System.exit(0);
        }
    }
        
    
    }//GEN-LAST:event_IiniciaActionPerformed

    private void jRBAlterna1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBAlterna1ActionPerformed
        jRBAlterna2.setSelected(false);
        jRBAlterna3.setSelected(false);
        jRBAlterna4.setSelected(false);
        jRBAlterna5.setSelected(false);
        
    }//GEN-LAST:event_jRBAlterna1ActionPerformed

    private void jRBAlterna2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBAlterna2ActionPerformed
        jRBAlterna1.setSelected(false);
        jRBAlterna3.setSelected(false);
        jRBAlterna4.setSelected(false);
        jRBAlterna5.setSelected(false);
        
    }//GEN-LAST:event_jRBAlterna2ActionPerformed

    private void jRBAlterna3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBAlterna3ActionPerformed
        jRBAlterna1.setSelected(false);
        jRBAlterna2.setSelected(false);
        jRBAlterna4.setSelected(false);
        jRBAlterna5.setSelected(false);
        
    }//GEN-LAST:event_jRBAlterna3ActionPerformed

    private void jRBAlterna4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBAlterna4ActionPerformed
        jRBAlterna1.setSelected(false);
        jRBAlterna2.setSelected(false);
        jRBAlterna3.setSelected(false);
        jRBAlterna5.setSelected(false);
        
    }//GEN-LAST:event_jRBAlterna4ActionPerformed

    private void jRBAlterna5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBAlterna5ActionPerformed
        jRBAlterna1.setSelected(false);
        jRBAlterna2.setSelected(false);
        jRBAlterna3.setSelected(false);
        jRBAlterna4.setSelected(false);
    }//GEN-LAST:event_jRBAlterna5ActionPerformed

    private void respondeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respondeActionPerformed
        String certa1 = jTCorreta1.getText();
        String certa2 = jTCorreta2.getText();
        String certa3 = jTCorreta3.getText();
        String certa4 = jTCorreta4.getText();
        String certa5 = jTCorreta5.getText();
        
       /* if (certa1.equals("Certa")){
            jLAlterna1.setForeground(Color.GREEN);
        }else{
            jLAlterna1.setForeground(Color.red);
        }
        if (certa2.equals("Certa")){
            jLAlterna2.setForeground(Color.GREEN);
        }else{
            jLAlterna2.setForeground(Color.red);
        }
        if (certa3.equals("Certa")){
            jLAlterna3.setForeground(Color.GREEN);
        }else{
            jLAlterna3.setForeground(Color.red);
        }
        if (certa4.equals("Certa")){
            jLAlterna4.setForeground(Color.GREEN);
        }else{
            jLAlterna4.setForeground(Color.red);
        }
        if (certa5.equals("Certa")){
            jLAlterna5.setForeground(Color.GREEN);
        }else{
            jLAlterna5.setForeground(Color.red);
        }*/
        //pausa cronometro 
        hilo.suspend();//se suspende o pausa el hilo
        issuspended = true;//el hilo esta suspendido 
        
        String usuario = jTUsuario.getText();
        String tempo = jLCronometro.getText();
        int codpergunta = Integer.parseInt(jLCodPergunta.getText());
        String pergunta = jLPerguntas.getText();
                
        String alternativa_escolhida = null;
        String certa_errada = null;
        String nivel = jTNivel.getText();
        
        if (jRBAlterna1.isSelected()){
            String correta1 = jTCorreta1.getText();
            String escolhida1 = jLAlterna1.getText();
            certa_errada = correta1;
            alternativa_escolhida = escolhida1;
        }
        if (jRBAlterna2.isSelected()){
            String correta2 = jTCorreta2.getText();
            String escolhida2 = jLAlterna2.getText();
            certa_errada = correta2;
            alternativa_escolhida = escolhida2;
        }
        if (jRBAlterna3.isSelected()){
            String correta3 = jTCorreta3.getText();
            String escolhida3 = jLAlterna3.getText();
            certa_errada = correta3;
            alternativa_escolhida = escolhida3;
        }
        if (jRBAlterna4.isSelected()){
            String correta4 = jTCorreta4.getText();
            String escolhida4 = jLAlterna4.getText();
            certa_errada = correta4;
            alternativa_escolhida = escolhida4;
        }
        if (jRBAlterna5.isSelected()){
            String correta5 = jTCorreta5.getText();
            String escolhida5 = jLAlterna5.getText();
            certa_errada = correta5;
            alternativa_escolhida = escolhida5;
        }
        
        Resposta novoResposta;
        novoResposta = new Resposta(usuario, tempo, codpergunta, pergunta, alternativa_escolhida, certa_errada, nivel);
        CadastroResposta.Cadastrar(usuario, tempo, codpergunta, pergunta, alternativa_escolhida, certa_errada, nivel);
        
        Connection connection = null;
        Statement statement = null;
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM TEMPORARIA;");

           
            
            while (resultSet.next()) {
                String datas = resultSet.getString("DATA");
                String nivels = resultSet.getString("NIVEL");
                int codperguntas = resultSet.getInt("CODPERGUNTA");
                String perguntas = resultSet.getString("PERGUNTA");
                String usuarioss = resultSet.getString("USUARIO");
                
                usuarios = usuarioss;
                niveis   = nivels;
                codigo   = codperguntas;
                
            }
            resultSet.close();
            statement.close();            
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + "erro na consulta de pacientes botão consultar " + e.getMessage());
            System.exit(0);
        }
        
        String data = jFTData.getText();
        
      
        Temporaria novoTemporaria;
        novoTemporaria = new Temporaria(data, nivel, codpergunta, pergunta, usuario);
        CadastroTemporaria.Cadastrar(data, nivel, codpergunta, pergunta, usuario);
    
        
        
        
        
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM RANDOM;");

           
            
            while (resultSet.next()) {
                int random = resultSet.getInt("RANDOM");
                int qtde_pergunta = resultSet.getInt("QTDE_PERGUNTA");
                int qtde_realizada = resultSet.getInt("QTDE_REALIZADA");
                
                qtde_per = qtde_pergunta;
                qtde_rea = qtde_realizada + 1;
                
            }
            resultSet.close();
            statement.close();            
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + "erro na consulta de pacientes botão consultar " + e.getMessage());
            System.exit(0);
        }
        
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            System.out.println("Banco de dados aberto com sucesso");

            

            statement = connection.createStatement();
            String sql = "UPDATE RANDOM set QTDE_REALIZADA = '" + qtde_rea + "'";

            statement.executeUpdate(sql);
            ;
            connection.commit();

            ResultSet resultSet = statement.executeQuery("SELECT * FROM RANDOM;");
            while (resultSet.next()) {
                int random = resultSet.getInt("RANDOM");
                int qtde_pergunta = resultSet.getInt("QTDE_PERGUNTA");
                int qtde_realizada = resultSet.getInt("QTDE_REALIZADA");

            }
            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
        
               
        JOptionPane.showMessageDialog(null, "Resposta Enviada!");
        
        //zera cronometro fazer depois de gravar tudo no banco de dados
        hilo.suspend();
        ds = seg = min = hora = 0;
        jLCronometro.setText("00:00:00:00");
        issuspended = true;
        
          jRBAlterna1.setSelected(false);
          jRBAlterna2.setSelected(false);
          jRBAlterna3.setSelected(false);
          jRBAlterna4.setSelected(false);
          jRBAlterna5.setSelected(false);
          
          if (qtde_rea == qtde_per){
              JOptionPane.showMessageDialog(null, "Questionário Completo com Sucesso!");
              Iinicia.setEnabled(false);
              responde.setEnabled(false);
              jLCodPergunta.setText("");
              jLPerguntas.setText("");
              jLAlterna1.setText("");
              jLAlterna2.setText("");
              jLAlterna3.setText("");
              jLAlterna4.setText("");
              jLAlterna5.setText("");
              jRBAlterna1.setSelected(false);
              jRBAlterna2.setSelected(false);
              jRBAlterna3.setSelected(false);
              jRBAlterna4.setSelected(false);
              jRBAlterna5.setSelected(false);
              
              
              try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:Perguntas.db");
            connection.setAutoCommit(false);
            System.out.println("Banco de dados aberto com sucesso");

            

            statement = connection.createStatement();
            String sql = "UPDATE RANDOM set QTDE_REALIZADA = '" + 0 + "'";

            statement.executeUpdate(sql);
            ;
            connection.commit();

            ResultSet resultSet = statement.executeQuery("SELECT * FROM RANDOM;");
            while (resultSet.next()) {
                int random = resultSet.getInt("RANDOM");
                int qtde_pergunta = resultSet.getInt("QTDE_PERGUNTA");
                int qtde_realizada = resultSet.getInt("QTDE_REALIZADA");

            }
            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
              
          }
          responde.setEnabled(false);
        
    }//GEN-LAST:event_respondeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String tela = "Perguntas";
        TelaLogin login = new TelaLogin();
        login.acesso(this);
        login.recebetela2(tela);
        login.setVisible(true);
        login.setLocationRelativeTo(this);
        
        
       /* if (permitido.equals("Permitido")){
        CadPerguntas cadastroperguntas = new CadPerguntas();
        cadastroperguntas.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Acesso negado!"
                                              + "Tenhao Usuario e Senha de Administrador!");
        }*/
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String tela = "Random";
        TelaLogin login = new TelaLogin();
        login.acesso2(this);
        login.recebeTela(tela);
        login.setVisible(true);
        login.setLocationRelativeTo(this);
        
        /*if (permitido.equals("Permitido")){
        CadRandom random = new CadRandom();
        random.setVisible(true);
        random.setLocationRelativeTo(this);
        }else{
            JOptionPane.showMessageDialog(null, "Acesso negado!"
                                              + "Tenhao Usuario e Senha de Administrador!");
        }*/
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void relatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioActionPerformed
        String tela = "Relatorio";
        TelaLogin login = new TelaLogin();
        login.acesso2(this);
        login.recebeTela(tela);
        login.setVisible(true);
        login.setLocationRelativeTo(this);
    }//GEN-LAST:event_relatorioActionPerformed

    private void grupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grupoActionPerformed
        String tela = "Grupo";
        TelaLogin login = new TelaLogin();
        login.acesso2(this);
        login.recebeTela(tela);
        login.setVisible(true);
        login.setLocationRelativeTo(this);
    }//GEN-LAST:event_grupoActionPerformed

    private void RelatorioAlternativaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelatorioAlternativaActionPerformed
        String tela = "RelPerguntas";
        TelaLogin login = new TelaLogin();
        login.acesso6(this);
        login.recebeTela2(tela);
        login.setVisible(true);
        login.setLocationRelativeTo(this);
    }//GEN-LAST:event_RelatorioAlternativaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPerguntas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPerguntas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPerguntas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPerguntas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPerguntas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Iinicia;
    private javax.swing.JMenuItem RelatorioAlternativa;
    private javax.swing.JButton fecha;
    private javax.swing.JMenuItem grupo;
    private javax.swing.JFormattedTextField jFTData;
    private javax.swing.JLabel jLAlterna1;
    private javax.swing.JLabel jLAlterna2;
    private javax.swing.JLabel jLAlterna3;
    private javax.swing.JLabel jLAlterna4;
    private javax.swing.JLabel jLAlterna5;
    private javax.swing.JLabel jLCodPergunta;
    private javax.swing.JLabel jLCronometro;
    private javax.swing.JLabel jLPerguntas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMINovoJogo;
    private javax.swing.JMenuItem jMISair;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPPerguntas;
    private javax.swing.JRadioButton jRBAlterna1;
    private javax.swing.JRadioButton jRBAlterna2;
    private javax.swing.JRadioButton jRBAlterna3;
    private javax.swing.JRadioButton jRBAlterna4;
    private javax.swing.JRadioButton jRBAlterna5;
    private javax.swing.JTextField jTCorreta1;
    private javax.swing.JTextField jTCorreta2;
    private javax.swing.JTextField jTCorreta3;
    private javax.swing.JTextField jTCorreta4;
    private javax.swing.JTextField jTCorreta5;
    private javax.swing.JTextField jTNivel;
    private javax.swing.JTextField jTUsuario;
    private javax.swing.JMenuItem relatorio;
    private javax.swing.JButton responde;
    // End of variables declaration//GEN-END:variables

    void nome_usuario(String nome) {
        jTUsuario.setText(nome);
    }

    void acesso_adm(String acessos) {
        permitido = acessos;
    }

    void acesso_adm2(String acessos) {
        permitido = acessos;
    }

    void nivel(String nivel) {
        jTNivel.setText(nivel);
    }

    void data(String data) {
        jFTData.setText(data);
    }
}
